plugins {
    id 'base'
    id 'idea'
}

allprojects {
    group 'com.github.slamdev'
}

subprojects {
    plugins.withId('java') {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        repositories {
            jcenter()
        }
        compileJava {
            options.encoding = 'UTF-8'
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Werror'
        }
        compileTestJava {
            options.encoding = 'UTF-8'
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Werror'
        }
        configurations {
            compile.exclude module: 'spring-boot-starter-tomcat'
        }
        task resolveDependencies(type: ResolveDependenciesTask)
    }
    plugins.withId('io.spring.dependency-management') {
        dependencyManagement {
            imports {
                mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.SR1'
                mavenBom 'org.springframework.boot:spring-boot-dependencies:2.0.5.RELEASE'
                mavenBom 'org.springframework.cloud:spring-cloud-gcp-dependencies:1.0.0.RELEASE'
            }
            dependencies {
                dependency 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'
                dependency 'org.codehaus.janino:janino:3.0.8'
                dependency 'net.logstash.logback:logstash-logback-encoder:5.0'
                dependency 'org.projectlombok:lombok:1.18.2'
                dependency 'org.lognet:grpc-spring-boot-starter:2.4.1'
                dependency 'io.grpc:grpc-stub:1.15.0'
                dependency 'com.google.protobuf:protobuf-java:3.6.1'
                dependency 'com.google.protobuf:protoc:3.6.1'
                dependency 'io.grpc:protoc-gen-grpc-java:1.15.0'
            }
        }
    }
    plugins.withId('pmd') {
        pmd {
            toolVersion = '6.5.0'
            ignoreFailures = false
            consoleOutput = false
        }
        tasks.withType(Pmd) {
            if (name == 'pmdMain') {
                source = 'src/main/java'
                ruleSetFiles = files("${rootProject.projectDir}/etc/lint/java/pmd/ruleSetMain.xml")
                ruleSets = []
            } else {
                ruleSetFiles = files("${rootProject.projectDir}/etc/lint/java/pmd/ruleSetTest.xml")
                ruleSets = []
            }
        }
    }
    plugins.withId('checkstyle') {
        checkstyle {
            toolVersion = '8.11'
            ignoreFailures = false
            showViolations = false
        }
        tasks.withType(Checkstyle) {
            if (name == 'checkstyleMain') {
                source = 'src/main/java'
                configFile = file("${rootProject.projectDir}/etc/lint/java/checkstyle/checkstyleMain.xml")
            } else {
                configFile = file("${rootProject.projectDir}/etc/lint/java/checkstyle/checkstyleTest.xml")
            }
        }
        dependencies {
            checkstyle 'com.thomasjensen.checkstyle.addons:checkstyle-addons:5.2.0'
            checkstyle 'com.github.sevntu-checkstyle:sevntu-checks:1.29.0'
        }

    }
    plugins.withId('findbugs') {
        findbugs {
            toolVersion = '3.0.1'
            ignoreFailures = false
            effort = 'max'
            reportLevel = 'low'
        }
        tasks.withType(FindBugs) {
            if (name == 'findbugsMain') {
                excludeFilter = file("${rootProject.projectDir}/etc/lint/java/findbugs/excludeMain.xml")
            } else {
                excludeFilter = file("${rootProject.projectDir}/etc/lint/java/findbugs/excludeTest.xml")
            }
            pluginClasspath = project.configurations.findbugsPlugins
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }
        dependencies {
            findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.2.1'
            findbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
            findbugsPlugins 'com.digitalreasoning.sdp:findbugs-extensions-drs:1.1.0'
        }
    }

    afterEvaluate {
        plugins.withId('com.google.protobuf') {
            protobuf {
                protoc {
                    artifact = 'com.google.protobuf:protoc'
                }
                plugins {
                    grpc {
                        artifact = 'io.grpc:protoc-gen-grpc-java'
                    }
                }
                generateProtoTasks {
                    all().each { task ->
                        task.plugins {
                            grpc {
                                outputSubDir = 'java'
                            }
                        }
                    }
                }
            }
            sourceSets {
                main {
                    java {
                        srcDir "${buildDir}/generated/source/proto/main/java"
                    }
                }
            }
        }
    }
}

class ResolveDependenciesTask extends DefaultTask {

    @TaskAction
    protected void apply() {
        project.configurations.each { configuration ->
            try {
                configuration.resolve()
            } catch (ignored) {
            }
        }
    }
}
